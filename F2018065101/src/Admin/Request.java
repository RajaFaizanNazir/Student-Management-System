/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import Database.Query;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RFaiz
 */
public class Request extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form Request
     */
    private volatile static Request uniqueInstance = null;
    private volatile static JFrame uniqueJframe = null;
    private static DefaultTableModel model = null;

    public Request() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        initComponents();
        model = (DefaultTableModel) table.getModel();
        close.addActionListener(this);
        approve.addActionListener(this);
        decline.addActionListener(this);
    }

    public static Request getInstance() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        if (uniqueInstance == null) { //Single Checked
            synchronized (Request.class) {
                if (uniqueInstance == null) { //Double Checked
                    uniqueInstance = new Request();
                }
            }
        }
        return uniqueInstance;
    }

    public static void showGUI() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        if (uniqueJframe == null) { //Single Checked
            synchronized (Request.class) {
                if (uniqueJframe == null) { //Double Checked
                    uniqueJframe = new JFrame();
                    uniqueJframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    uniqueJframe.add(getInstance());
                    uniqueJframe.pack();
                    uniqueJframe.setLocationRelativeTo(null);
                    uniqueJframe.setTitle("Admin");
                }
            }
        }
        updatetable();
        uniqueJframe.setVisible(true);
    }

    private static void updatetable() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        model.setRowCount(0);
        ResultSet rs = Query.executeQuery("SELECT * from request where status = 'Pending';");
        while (rs.next()) {
            model.addRow(new Object[]{rs.getString("id"), rs.getString("studentid"), rs.getString("courseid"), rs.getString("status"), rs.getString("time")});
        }
    }

    public static void hideGUI() {
        uniqueJframe.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        close = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        approve = new javax.swing.JButton();
        decline = new javax.swing.JButton();

        close.setText("CLOSE");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student ID", "Course ID", "Status", "Time"
            }
        ));
        jScrollPane1.setViewportView(table);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Pending Requests");

        approve.setText("Approve");

        decline.setText("Decline");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(230, 230, 230)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(close)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(approve)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(close)
                    .addComponent(approve)
                    .addComponent(decline)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approve;
    private javax.swing.JButton close;
    private javax.swing.JButton decline;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == close) {
            hideGUI();
            try {
                Admin.showGUI();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Request.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (e.getSource() == approve) {
            String reqid = table.getValueAt(table.getSelectedRow(), 0).toString();
            try {
                Query.executeUpdate("UPDATE request set status='Approved' where id=" + reqid + ";");
                updatetable();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException ex) {
                Logger.getLogger(Request.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (e.getSource() == decline) {
            String reqid = table.getValueAt(table.getSelectedRow(), 0).toString();
            try {
                Query.executeUpdate("UPDATE request set status='Declined' where id=" + reqid + ";");
                updatetable();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException ex) {
                Logger.getLogger(Request.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
